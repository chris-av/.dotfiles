#!/usr/bin/env python3

# inspired by asottile <3
# link: https://github.com/asottile/scratch/blob/main/python/git-github-url

import argparse
import re
import subprocess
import sys
import webbrowser


PLATFORMS = {
    "github.com": {
        "https": "https://github.com/",
        "ssh": "git@github.com:",
        "url_fmt": "https://github.com/{endpoint}",
    },
    "gitlab.com": {
        "https": "https://gitlab.com/",
        "ssh": "git@gitlab.com:",
        "url_fmt": "https://gitlab.com/{endpoint}",
    },
    "codeberg.org": {
        "https": "https://codeberg.org/",
        "ssh": "git@codeberg.org:",
        "url_fmt": "https://codeberg.org/{endpoint}",
    },
}


def extract_endpoint(remote: str, platform: str):
    platform_data = PLATFORMS.get(platform)
    if platform_data is None:
        raise ValueError(f"[fatal] unknown platform : {platform}")
    https = platform_data["https"]
    ssh = platform_data["ssh"]

    if remote.startswith(https):
        remote = remote[len(https):]
    if remote.startswith(ssh):
        remote = remote[len(ssh):]
    if remote.endswith(".git"):
        remote = remote[:-4]
    return remote

def normalize_remote_url(remote: str) -> str:
    for host, data in PLATFORMS.items():
        if host in remote:
            endpoint = extract_endpoint(remote, host)
            url_fmt = data["url_fmt"]
            return url_fmt.format(endpoint=endpoint)
    raise Exception(f"could not detect platform for {remote}")

def parse_arguments(args):
    parser = argparse.ArgumentParser(
        prog="remote-url",
        usage="%(prog)s [options]",
        description="""\
            Tool to display the remote urls for a given repository
        """,
    )
    parser.add_argument("remote", nargs="?", default=None, help="Name of the remote whose url should be displayed")
    parser.add_argument("-l", "--list", action="store_true", default=False, help="output list of all remotes and their corresponding urls")
    parser.add_argument("-o", "--open", action="store_true", default=False, help="open the remote url with the system's default browser")
    namespace = parser.parse_args(args)
    return vars(namespace)


def main(argv=None):
    args = parse_arguments(argv)

    cmd = ('git', 'remote', '-v')
    remotes = []

    try:
        output = subprocess.check_output(cmd, encoding='UTF-8').strip()
        remotes = output.splitlines()
    except subprocess.CalledProcessError as e:
        print(e, file=sys.stderr, flush=True)
        return 1


    if len(remotes) == 0:
        print("no remotes to show", file=sys.stderr, flush=True)
        return 1

    remotes_dict = {}

    for remote in remotes:
        name, remote = remote.split("\t")
        remote = re.sub(r"\s+\(\w+\)$", "", remote)

        try:
            url = normalize_remote_url(remote)
            remotes_dict.setdefault(name, url)
        except Exception as e:
            # fallback to original remote presentation
            print(f"[warn] {e}", file=sys.stderr, flush=True)
            url = remote

    if args.get("list") is True:
        max_key_len = max(len(str(k)) for k in remotes_dict)
        for key, value in remotes_dict.items():
            print(f"{str(key):<{max_key_len}} : {value}")
        return

    all_remotes = list(remotes_dict.keys())
    show_remote_name = args.get("remote")

    if show_remote_name is None:
        # user did not supply a remote, find the first valid one
        show_remote_name = "origin" if "origin" in all_remotes else all_remotes[0]

    show_remote_url = remotes_dict.get(show_remote_name)

    if show_remote_url is None:
        print(f"did not find remote : {show_remote_name}", file=sys.stderr, flush=True)
        return 1

    print(f"{show_remote_url}")

    if args.get("open") is True:
        webbrowser.open(show_remote_url)

    return 0


if __name__ == '__main__':
    raise SystemExit(main())
